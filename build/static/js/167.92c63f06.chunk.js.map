{"version":3,"sources":["ui-component/cards/ContactList.js","views/application/contact/List/index.js"],"names":["avatarImage","require","ListWrapper","styled","theme","padding","borderBottom","palette","mode","borderTop","borderColor","grey","ContactList","avatar","name","role","onActive","useTheme","avatarProfile","default","Grid","container","alignItems","spacing","gridSpacing","item","xs","sm","onClick","style","cursor","sx","flexWrap","Avatar","alt","src","width","height","zeroMinWidth","Typography","variant","component","justifyContent","breakpoints","down","Tooltip","placement","title","Button","minWidth","p","fontSize","color","CardListPage","dispatch","useDispatch","useState","user","setUser","data","setData","contacts","useSelector","state","contact","useEffect","reduce","a","curr","firstLatter","toUpperCase","Object","prototype","hasOwnProperty","call","push","isEmpty","idx","findIndex","id","getContacts","modifyUser","u","modifyContact","userDetails","setUserDetails","userEdit","setUserEdit","MainCard","display","md","OutlinedInput","placeholder","fullWidth","startAdornment","InputAdornment","position","stroke","size","startIcon","px","py","company","work_email","personal_email","work_phone","personal_phone","location","image","User1","status","lastMessage","birthdayText","keys","map","key","index","direction","userRow","i","email","phone","margin","UserDetails","onEditClick","onClose","UserEdit","onSave","onCancel"],"mappings":"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","file":"static/js/167.92c63f06.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { styled, useTheme } from '@mui/material/styles';\r\nimport { Button, Grid, Tooltip, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\nimport { gridSpacing } from 'store/constant';\r\n\r\n// assets\r\nimport ChatBubbleTwoToneIcon from '@mui/icons-material/ChatBubbleTwoTone';\r\nimport PhoneTwoToneIcon from '@mui/icons-material/PhoneTwoTone';\r\n\r\nconst avatarImage = require.context('assets/images/users', true);\r\n\r\n// styles\r\nconst ListWrapper = styled('div')(({ theme }) => ({\r\n    padding: '15px 0',\r\n    borderBottom: theme.palette.mode === 'dark' ? 'none' : '1px solid',\r\n    borderTop: theme.palette.mode === 'dark' ? 'none' : '1px solid',\r\n    borderColor: `${theme.palette.grey[100]}!important`\r\n}));\r\n\r\n// ==============================|| USER CONTACT LIST ||============================== //\r\n\r\nconst ContactList = ({ avatar, name, role, onActive }) => {\r\n    const theme = useTheme();\r\n    const avatarProfile = avatar && avatarImage(`./${avatar}`).default;\r\n\r\n    return (\r\n        <ListWrapper>\r\n            <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                <Grid item xs={12} sm={6} onClick={() => onActive && onActive()} style={{ cursor: 'pointer' }}>\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing} sx={{ flexWrap: 'nowrap' }}>\r\n                        <Grid item>\r\n                            <Avatar alt={name} src={avatarProfile} sx={{ width: 48, height: 48 }} />\r\n                        </Grid>\r\n                        <Grid item sm zeroMinWidth>\r\n                            <Grid container spacing={0}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"h4\" component=\"div\">\r\n                                        {name}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"caption\">{role}</Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <Grid\r\n                        container\r\n                        spacing={1}\r\n                        sx={{ justifyContent: 'flex-end', [theme.breakpoints.down('md')]: { justifyContent: 'flex-start' } }}\r\n                    >\r\n                        <Grid item>\r\n                            <Tooltip placement=\"top\" title=\"Message\">\r\n                                <Button variant=\"outlined\" sx={{ minWidth: 32, height: 32, p: 0 }}>\r\n                                    <ChatBubbleTwoToneIcon fontSize=\"small\" />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Tooltip placement=\"top\" title=\"Call\">\r\n                                <Button variant=\"outlined\" color=\"secondary\" sx={{ minWidth: 32, height: 32, p: 0 }}>\r\n                                    <PhoneTwoToneIcon fontSize=\"small\" />\r\n                                </Button>\r\n                            </Tooltip>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </ListWrapper>\r\n    );\r\n};\r\n\r\nContactList.propTypes = {\r\n    avatar: PropTypes.string,\r\n    name: PropTypes.string,\r\n    onActive: PropTypes.func,\r\n    role: PropTypes.string\r\n};\r\n\r\nexport default ContactList;\r\n","import { useEffect, useState, Fragment } from 'react';\r\n\r\n// material-ui\r\nimport { Button, Grid, InputAdornment, OutlinedInput, Typography } from '@mui/material';\r\n\r\n// third-party\r\nimport { isEmpty } from 'lodash';\r\n\r\n// project imports\r\nimport UserDetails from '../UserDetails';\r\nimport UserEdit from '../UserEdit';\r\nimport ContactList from 'ui-component/cards/ContactList';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport { gridSpacing } from 'store/constant';\r\nimport User1 from 'assets/images/users/avatar-1.png';\r\n\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getContacts, modifyContact } from 'store/slices/contact';\r\n\r\n// assets\r\nimport { IconSearch } from '@tabler/icons';\r\nimport AddCircleOutlineOutlinedIcon from '@mui/icons-material/AddCircleOutlineOutlined';\r\n\r\n// ==============================|| CONTACT LIST ||============================== //\r\n\r\nconst CardListPage = () => {\r\n    const dispatch = useDispatch();\r\n    const [user, setUser] = useState({});\r\n    const [data, setData] = useState({});\r\n\r\n    // get all users details\r\n    const { contacts } = useSelector((state) => state.contact);\r\n    const convertData = (userData) =>\r\n        userData.reduce((a, curr) => {\r\n            const firstLatter = curr.name[0].toUpperCase();\r\n            if (Object.prototype.hasOwnProperty.call(a, firstLatter)) {\r\n                a[firstLatter].push(curr);\r\n            } else {\r\n                a[firstLatter] = [curr];\r\n            }\r\n            return a;\r\n        }, {});\r\n    useEffect(() => {\r\n        setData(convertData(contacts));\r\n        if (!isEmpty(user)) {\r\n            const idx = contacts.findIndex((item) => item.id === user.id);\r\n            if (idx > -1) setUser(contacts[idx]);\r\n        }\r\n    }, [contacts, user]);\r\n\r\n    useEffect(() => {\r\n        dispatch(getContacts());\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []);\r\n\r\n    // edit selected user and modify users data\r\n    const modifyUser = async (u) => {\r\n        await dispatch(modifyContact(u));\r\n    };\r\n\r\n    // handle new user insert action\r\n    const [userDetails, setUserDetails] = useState(false);\r\n    const [userEdit, setUserEdit] = useState(false);\r\n    const handleOnAdd = () => {\r\n        setUser({\r\n            name: '',\r\n            company: '',\r\n            role: '',\r\n            work_email: '',\r\n            personal_email: '',\r\n            work_phone: '',\r\n            personal_phone: '',\r\n            location: 'USA',\r\n            image: User1,\r\n            status: 'I am online',\r\n            lastMessage: '2h ago',\r\n            birthdayText: ''\r\n        });\r\n        setUserDetails(false);\r\n        setUserEdit(true);\r\n    };\r\n\r\n    return (\r\n        <MainCard title=\"Contact List\">\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs zeroMinWidth sx={{ display: userDetails || userEdit ? { xs: 'none', md: 'block' } : 'block' }}>\r\n                    <Grid container alignItems=\"center\" spacing={gridSpacing}>\r\n                        <Grid item xs zeroMinWidth>\r\n                            <OutlinedInput\r\n                                id=\"input-search-card-style1\"\r\n                                placeholder=\"Search Contact\"\r\n                                fullWidth\r\n                                startAdornment={\r\n                                    <InputAdornment position=\"start\">\r\n                                        <IconSearch stroke={1.5} size=\"1rem\" />\r\n                                    </InputAdornment>\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                size=\"large\"\r\n                                startIcon={<AddCircleOutlineOutlinedIcon />}\r\n                                sx={{ px: 2.75, py: 1.5 }}\r\n                                onClick={handleOnAdd}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Grid>\r\n\r\n                        {Object.keys(data).map((key, index) => (\r\n                            <Fragment key={index}>\r\n                                <Grid item xs={12}>\r\n                                    <Typography variant=\"h4\" color=\"primary\" sx={{ fontSize: '1rem' }}>\r\n                                        {key.toUpperCase()}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item xs={12}>\r\n                                    <Grid container direction=\"row\" spacing={0}>\r\n                                        {data[key].map((userRow, i) => (\r\n                                            <Grid item xs={12} key={i}>\r\n                                                <ContactList\r\n                                                    avatar={userRow.avatar}\r\n                                                    name={userRow.name}\r\n                                                    role={userRow.role}\r\n                                                    email={userRow.work_email}\r\n                                                    contact={userRow.phone}\r\n                                                    location={userRow.location}\r\n                                                    onActive={() => {\r\n                                                        setUser(userRow);\r\n                                                        setUserDetails(true);\r\n                                                        setUserEdit(false);\r\n                                                    }}\r\n                                                />\r\n                                            </Grid>\r\n                                        ))}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Fragment>\r\n                        ))}\r\n                    </Grid>\r\n                </Grid>\r\n                {userDetails && (\r\n                    <Grid item sx={{ width: 342, margin: { xs: '0 auto', md: 'initial' } }}>\r\n                        <UserDetails\r\n                            user={user}\r\n                            onEditClick={() => {\r\n                                setUserDetails(false);\r\n                                setUserEdit(true);\r\n                            }}\r\n                            onClose={() => {\r\n                                setUserDetails(false);\r\n                                setUserEdit(false);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n\r\n                {userEdit && (\r\n                    <Grid item sx={{ width: 342, margin: { xs: '0 auto', md: 'initial' } }}>\r\n                        <UserEdit\r\n                            user={user}\r\n                            onSave={(u) => {\r\n                                if (u.id) setUserDetails(true);\r\n                                setUserEdit(false);\r\n                                modifyUser(u);\r\n                            }}\r\n                            onCancel={(u) => {\r\n                                if (u.id) setUserDetails(true);\r\n                                setUserEdit(false);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default CardListPage;\r\n"],"sourceRoot":""}