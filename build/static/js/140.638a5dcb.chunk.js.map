{"version":3,"sources":["views/ui-elements/advance/UISnackbar.js","ui-component/extended/Avatar.js","ui-component/cards/CardSecondaryAction.js"],"names":["UISnackbar","theme","useTheme","dispatch","useDispatch","title","secondary","link","container","spacing","gridSpacing","item","xs","sm","md","justifyContent","alignItems","variant","onClick","openSnackbar","open","message","close","sx","color","palette","error","dark","borderColor","background","main","alert","success","warning","actionButton","anchorOrigin","vertical","horizontal","transition","Avatar","outline","size","others","colorSX","paper","bgcolor","outlineSX","border","sizeSX","width","height","CardSecondaryAction","icon","placement","disableRipple","component","Link","href","target","alt","viewBox","fill","xmlns","clipPath","d","primary","id","transform"],"mappings":"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","file":"static/js/140.638a5dcb.chunk.js","sourcesContent":["// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Button, Grid } from '@mui/material';\r\n\r\n// project imports\r\nimport SubCard from 'ui-component/cards/SubCard';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport SecondaryAction from 'ui-component/cards/CardSecondaryAction';\r\nimport { useDispatch } from 'store';\r\nimport { gridSpacing } from 'store/constant';\r\nimport { openSnackbar } from 'store/slices/snackbar';\r\n\r\n// ==============================|| UI SNACKBAR ||============================== //\r\n\r\nconst UISnackbar = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <MainCard title=\"Snackbar\" secondary={<SecondaryAction link=\"https://next.material-ui.com/components/snackbars/\" />}>\r\n            <Grid container spacing={gridSpacing}>\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <SubCard title=\"Basic Snackbar\">\r\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is default message',\r\n                                                variant: 'alert',\r\n                                                close: false\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Default\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    sx={{\r\n                                        color: theme.palette.error.dark,\r\n                                        borderColor: theme.palette.error.dark,\r\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is error message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'error'\r\n                                                },\r\n                                                close: false\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Error\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.success.dark,\r\n                                        borderColor: theme.palette.success.dark,\r\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is success message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'success'\r\n                                                },\r\n                                                close: false\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Success\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.warning.dark,\r\n                                        borderColor: theme.palette.warning.dark,\r\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is warning message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'warning'\r\n                                                },\r\n                                                close: false\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Warning\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <SubCard title=\"With Close\">\r\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is default message',\r\n                                                variant: 'alert'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Default\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    sx={{\r\n                                        color: theme.palette.error.dark,\r\n                                        borderColor: theme.palette.error.dark,\r\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is error message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'error'\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Error\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.success.dark,\r\n                                        borderColor: theme.palette.success.dark,\r\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is success message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'success'\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Success\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.warning.dark,\r\n                                        borderColor: theme.palette.warning.dark,\r\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is warning message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'warning'\r\n                                                }\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Warning\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} sm={6} md={4}>\r\n                    <SubCard title=\"With Close + Action\">\r\n                        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is default message',\r\n                                                variant: 'alert',\r\n                                                actionButton: true\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Default\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    sx={{\r\n                                        color: theme.palette.error.dark,\r\n                                        borderColor: theme.palette.error.dark,\r\n                                        '&:hover': { background: theme.palette.error.main + 20, borderColor: theme.palette.error.dark }\r\n                                    }}\r\n                                    variant=\"outlined\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is error message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'error'\r\n                                                },\r\n                                                actionButton: true\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Error\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.success.dark,\r\n                                        borderColor: theme.palette.success.dark,\r\n                                        '&:hover': { background: theme.palette.success.main + 20, borderColor: theme.palette.success.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is success message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'success'\r\n                                                },\r\n                                                actionButton: true\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Success\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"outlined\"\r\n                                    sx={{\r\n                                        color: theme.palette.warning.dark,\r\n                                        borderColor: theme.palette.warning.dark,\r\n                                        '&:hover': { background: theme.palette.warning.main + 20, borderColor: theme.palette.warning.dark }\r\n                                    }}\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is warning message',\r\n                                                variant: 'alert',\r\n                                                alert: {\r\n                                                    color: 'warning'\r\n                                                },\r\n                                                actionButton: true\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Warning\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n\r\n                <Grid item xs={12} md={6}>\r\n                    <SubCard title=\"Snackbar Position\">\r\n                        <Grid container spacing={2} justifyContent=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'top', horizontal: 'left' },\r\n                                                message: 'This is an top-left message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Top-Left\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'top', horizontal: 'center' },\r\n                                                message: 'This is an top-center message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Top-Center\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'top', horizontal: 'right' },\r\n                                                message: 'This is an top-right message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Top-Right\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'right' },\r\n                                                message: 'This is an bottom-right message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Bottom-Right\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'center' },\r\n                                                message: 'This is an bottom-center message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Bottom-Center\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                anchorOrigin: { vertical: 'bottom', horizontal: 'left' },\r\n                                                message: 'This is an bottom-left message!'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Bottom-Left\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n                <Grid item xs={12} md={6}>\r\n                    <SubCard title=\"Snackbar Trasition\">\r\n                        <Grid container spacing={2} justifyContent=\"center\">\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an fade message!',\r\n                                                transition: 'Fade'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Default/Fade\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an slide-left message!',\r\n                                                transition: 'SlideLeft'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Slide Left\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an slide-up message!',\r\n                                                transition: 'SlideUp'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Slide Up\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an slide-right message!',\r\n                                                transition: 'SlideRight'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Slide Right\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an slide-down message!',\r\n                                                transition: 'SlideDown'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Slide Down\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    onClick={() =>\r\n                                        dispatch(\r\n                                            openSnackbar({\r\n                                                open: true,\r\n                                                message: 'This is an grow message!',\r\n                                                transition: 'Grow'\r\n                                            })\r\n                                        )\r\n                                    }\r\n                                >\r\n                                    Grow\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </SubCard>\r\n                </Grid>\r\n            </Grid>\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default UISnackbar;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport MuiAvatar from '@mui/material/Avatar';\r\n\r\n// ==============================|| AVATAR ||============================== //\r\n\r\nconst Avatar = ({ color, outline, size, sx, ...others }) => {\r\n    const theme = useTheme();\r\n\r\n    const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };\r\n    const outlineSX = outline && {\r\n        color: color ? `${color}.main` : `primary.main`,\r\n        bgcolor: theme.palette.background.paper,\r\n        border: '2px solid',\r\n        borderColor: color ? `${color}.main` : `primary.main`\r\n    };\r\n    let sizeSX = {};\r\n    switch (size) {\r\n        case 'badge':\r\n            sizeSX = {\r\n                width: theme.spacing(3.5),\r\n                height: theme.spacing(3.5)\r\n            };\r\n            break;\r\n        case 'xs':\r\n            sizeSX = {\r\n                width: theme.spacing(4.25),\r\n                height: theme.spacing(4.25)\r\n            };\r\n            break;\r\n        case 'sm':\r\n            sizeSX = {\r\n                width: theme.spacing(5),\r\n                height: theme.spacing(5)\r\n            };\r\n            break;\r\n        case 'lg':\r\n            sizeSX = {\r\n                width: theme.spacing(9),\r\n                height: theme.spacing(9)\r\n            };\r\n            break;\r\n        case 'xl':\r\n            sizeSX = {\r\n                width: theme.spacing(10.25),\r\n                height: theme.spacing(10.25)\r\n            };\r\n            break;\r\n        case 'md':\r\n            sizeSX = {\r\n                width: theme.spacing(7.5),\r\n                height: theme.spacing(7.5)\r\n            };\r\n            break;\r\n        default:\r\n            sizeSX = {};\r\n    }\r\n\r\n    return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;\r\n};\r\n\r\nAvatar.propTypes = {\r\n    color: PropTypes.string,\r\n    outline: PropTypes.bool,\r\n    size: PropTypes.string,\r\n    sx: PropTypes.object\r\n};\r\n\r\nexport default Avatar;\r\n","import PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { ButtonBase, Link, Tooltip } from '@mui/material';\r\n\r\n// project imports\r\nimport Avatar from '../extended/Avatar';\r\n\r\n// ==============================|| CARD SECONDARY ACTION ||============================== //\r\n\r\nconst CardSecondaryAction = ({ title, link, icon }) => {\r\n    const theme = useTheme();\r\n\r\n    return (\r\n        <Tooltip title={title || 'Reference'} placement=\"left\">\r\n            <ButtonBase disableRipple>\r\n                {!icon && (\r\n                    <Avatar component={Link} href={link} target=\"_blank\" alt=\"MUI Logo\" size=\"badge\" color=\"primary\" outline>\r\n                        <svg width=\"500\" height=\"500\" viewBox=\"0 0 500 500\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <g clipPath=\"url(#clip0)\">\r\n                                <path\r\n                                    d=\"M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z\"\r\n                                    fill={theme.palette.primary[800]}\r\n                                />\r\n                                <path\r\n                                    d=\"M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                                <path d=\"M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z\" fill={theme.palette.primary[800]} />\r\n                                <path\r\n                                    d=\"M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z\"\r\n                                    fill={theme.palette.primary.main}\r\n                                />\r\n                            </g>\r\n                            <defs>\r\n                                <clipPath id=\"clip0\">\r\n                                    <rect width=\"300\" height=\"238.3\" fill=\"white\" transform=\"translate(100 131)\" />\r\n                                </clipPath>\r\n                            </defs>\r\n                        </svg>\r\n                    </Avatar>\r\n                )}\r\n                {icon && (\r\n                    <Avatar component={Link} href={link} target=\"_blank\" size=\"badge\" color=\"primary\" outline>\r\n                        {icon}\r\n                    </Avatar>\r\n                )}\r\n            </ButtonBase>\r\n        </Tooltip>\r\n    );\r\n};\r\n\r\nCardSecondaryAction.propTypes = {\r\n    icon: PropTypes.node,\r\n    link: PropTypes.string,\r\n    title: PropTypes.string\r\n};\r\n\r\nexport default CardSecondaryAction;\r\n"],"sourceRoot":""}