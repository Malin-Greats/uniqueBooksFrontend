{"version":3,"sources":["views/application/customer/ProductReview/ReviewEdit.js","views/application/customer/ProductReview/index.js"],"names":["reviewState","value","label","ReviewEdit","open","handleCloseDialog","useState","currency","setCurrency","setValue","Dialog","onClose","sx","maxWidth","DialogTitle","DialogContent","Grid","container","spacing","gridSpacing","my","item","xs","TextField","id","fullWidth","defaultValue","multiline","rows","Typography","align","variant","Rating","name","precision","onChange","event","newValue","select","target","map","option","MenuItem","DialogActions","AnimateButton","Button","onClick","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","el","index","sort","headCells","numeric","EnhancedTableHead","onSelectAllClick","numSelected","rowCount","onRequestSort","theme","selected","TableHead","TableRow","TableCell","padding","pl","Checkbox","color","indeterminate","checked","inputProps","colSpan","length","headCell","disablePadding","sortDirection","TableSortLabel","active","direction","property","Box","component","visuallyHidden","pr","palette","mode","EnhancedTableToolbar","Toolbar","p","secondary","main","flexGrow","Tooltip","title","IconButton","size","fontSize","ProductReviewList","useTheme","dispatch","useDispatch","React","setOpen","handleClickOpenDialog","setOrder","setOrderBy","setSelected","page","setPage","rowsPerPage","setRowsPerPage","search","setSearch","setRows","productreviews","useSelector","state","customer","getProductReviews","handleClick","selectedIndex","indexOf","newSelected","concat","slice","emptyRows","Math","max","MainCard","content","CardContent","justifyContent","alignItems","sm","InputProps","startAdornment","InputAdornment","position","newString","newRows","filter","row","matches","containsQuery","forEach","toString","toLowerCase","includes","placeholder","textAlign","TableContainer","Table","minWidth","newSelectedId","n","TableBody","isItemSelected","labelId","hover","role","tabIndex","scope","cursor","author","review","rating","readOnly","date","status","Chip","chipcolor","style","height","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt"],"mappings":"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","file":"static/js/170.281b1731.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useState } from 'react';\r\n\r\n// material-ui\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, Grid, MenuItem, Rating, TextField, Typography } from '@mui/material';\r\n\r\n// project imports\r\nimport { gridSpacing } from 'store/constant';\r\nimport AnimateButton from 'ui-component/extended/AnimateButton';\r\n\r\n// review state options\r\nconst reviewState = [\r\n    {\r\n        value: '1',\r\n        label: 'Published'\r\n    },\r\n    {\r\n        value: '2',\r\n        label: 'Pending'\r\n    },\r\n    {\r\n        value: '3',\r\n        label: 'confirm'\r\n    }\r\n];\r\n\r\nconst ReviewEdit = ({ open, handleCloseDialog }) => {\r\n    // handle review status change\r\n    const [currency, setCurrency] = useState('1');\r\n    const handleSelectChange = (event) => {\r\n        setCurrency(event.target.value);\r\n    };\r\n\r\n    // handle star rating\r\n    const [value, setValue] = useState(2);\r\n\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={handleCloseDialog}\r\n            sx={{\r\n                '&>div:nth-of-type(3)': {\r\n                    '&>div': {\r\n                        maxWidth: 400\r\n                    }\r\n                }\r\n            }}\r\n        >\r\n            {open && (\r\n                <>\r\n                    <DialogTitle>Edit Review</DialogTitle>\r\n                    <DialogContent>\r\n                        <Grid container spacing={gridSpacing} sx={{ my: 0 }}>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic-review-product\"\r\n                                    fullWidth\r\n                                    label=\"Product \"\r\n                                    defaultValue=\"Apple Watch Series 4\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField id=\"outlined-basic-review-author\" fullWidth label=\"Author \" defaultValue=\"Joseph William\" />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic-review\"\r\n                                    fullWidth\r\n                                    multiline\r\n                                    rows={4}\r\n                                    label=\"Text of review\"\r\n                                    defaultValue=\"If you're coming from a Series 3, the choice is more difficult. The Series 4 is undoubtedly the better device. And if you care about fall detection, the ECG app, or a larger screen then upgrading makes sense. But I think most people will remain satisfied with their Series 3s.\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <Typography align=\"left\" variant=\"body2\">\r\n                                    Rating\r\n                                </Typography>\r\n                                <Rating\r\n                                    name=\"simple-controlled\"\r\n                                    value={value}\r\n                                    precision={0.5}\r\n                                    onChange={(event, newValue) => {\r\n                                        setValue(newValue);\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    id=\"standard-select-currency\"\r\n                                    select\r\n                                    label=\"Status\"\r\n                                    value={currency}\r\n                                    fullWidth\r\n                                    onChange={handleSelectChange}\r\n                                >\r\n                                    {reviewState.map((option) => (\r\n                                        <MenuItem key={option.value} value={option.value}>\r\n                                            {option.label}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextField>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <AnimateButton>\r\n                            <Button variant=\"contained\">Create</Button>\r\n                        </AnimateButton>\r\n                        <Button variant=\"text\" onClick={handleCloseDialog}>\r\n                            Close\r\n                        </Button>\r\n                    </DialogActions>\r\n                </>\r\n            )}\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nReviewEdit.propTypes = {\r\n    open: PropTypes.bool,\r\n    handleCloseDialog: PropTypes.func\r\n};\r\n\r\nexport default ReviewEdit;\r\n","import PropTypes from 'prop-types';\r\nimport * as React from 'react';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport {\r\n    Box,\r\n    CardContent,\r\n    Checkbox,\r\n    Grid,\r\n    IconButton,\r\n    InputAdornment,\r\n    Rating,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TablePagination,\r\n    TableRow,\r\n    TableSortLabel,\r\n    TextField,\r\n    Toolbar,\r\n    Tooltip,\r\n    Typography\r\n} from '@mui/material';\r\nimport { visuallyHidden } from '@mui/utils';\r\n\r\n// project imports\r\nimport ReviewEdit from './ReviewEdit';\r\nimport MainCard from 'ui-component/cards/MainCard';\r\nimport Chip from 'ui-component/extended/Chip';\r\nimport { useDispatch, useSelector } from 'store';\r\nimport { getProductReviews } from 'store/slices/customer';\r\n\r\n// assets\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport FilterListIcon from '@mui/icons-material/FilterListTwoTone';\r\nimport PrintIcon from '@mui/icons-material/PrintTwoTone';\r\nimport FileCopyIcon from '@mui/icons-material/FileCopyTwoTone';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport VisibilityTwoToneIcon from '@mui/icons-material/VisibilityTwoTone';\r\nimport EditTwoToneIcon from '@mui/icons-material/EditTwoTone';\r\n\r\n// table sort\r\nfunction descendingComparator(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n        return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\r\n\r\nconst getComparator = (order, orderBy) =>\r\n    order === 'desc' ? (a, b) => descendingComparator(a, b, orderBy) : (a, b) => -descendingComparator(a, b, orderBy);\r\n\r\nfunction stableSort(array, comparator) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n        const order = comparator(a[0], b[0]);\r\n        if (order !== 0) return order;\r\n        return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\n// table header options\r\nconst headCells = [\r\n    {\r\n        id: 'name',\r\n        numeric: false,\r\n        label: 'Product Name',\r\n        align: 'left'\r\n    },\r\n    {\r\n        id: 'author',\r\n        numeric: true,\r\n        label: 'Author',\r\n        align: 'left'\r\n    },\r\n    {\r\n        id: 'review',\r\n        numeric: true,\r\n        label: 'Review',\r\n        align: 'left'\r\n    },\r\n    {\r\n        id: 'rating',\r\n        numeric: true,\r\n        label: 'Rating',\r\n        align: 'center'\r\n    },\r\n    {\r\n        id: 'date',\r\n        numeric: true,\r\n        label: 'Date',\r\n        align: 'center'\r\n    },\r\n    {\r\n        id: 'status',\r\n        numeric: false,\r\n        label: 'Status',\r\n        align: 'center'\r\n    }\r\n];\r\n\r\n// ==============================|| TABLE HEADER ||============================== //\r\n\r\nfunction EnhancedTableHead({ onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort, theme, selected }) {\r\n    const createSortHandler = (property) => (event) => {\r\n        onRequestSort(event, property);\r\n    };\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                <TableCell padding=\"checkbox\" sx={{ pl: 3 }}>\r\n                    <Checkbox\r\n                        color=\"primary\"\r\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\r\n                        checked={rowCount > 0 && numSelected === rowCount}\r\n                        onChange={onSelectAllClick}\r\n                        inputProps={{\r\n                            'aria-label': 'select all desserts'\r\n                        }}\r\n                    />\r\n                </TableCell>\r\n                {numSelected > 0 && (\r\n                    <TableCell padding=\"none\" colSpan={7}>\r\n                        <EnhancedTableToolbar numSelected={selected.length} />\r\n                    </TableCell>\r\n                )}\r\n                {numSelected <= 0 &&\r\n                    headCells.map((headCell) => (\r\n                        <TableCell\r\n                            key={headCell.id}\r\n                            align={headCell.align}\r\n                            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n                            sortDirection={orderBy === headCell.id ? order : false}\r\n                        >\r\n                            <TableSortLabel\r\n                                active={orderBy === headCell.id}\r\n                                direction={orderBy === headCell.id ? order : 'asc'}\r\n                                onClick={createSortHandler(headCell.id)}\r\n                            >\r\n                                {headCell.label}\r\n                                {orderBy === headCell.id ? (\r\n                                    <Box component=\"span\" sx={visuallyHidden}>\r\n                                        {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                                    </Box>\r\n                                ) : null}\r\n                            </TableSortLabel>\r\n                        </TableCell>\r\n                    ))}\r\n                {numSelected <= 0 && (\r\n                    <TableCell sortDirection={false} align=\"center\" sx={{ pr: 3 }}>\r\n                        <Typography variant=\"subtitle1\" sx={{ color: theme.palette.mode === 'dark' ? 'grey.600' : 'grey.900' }}>\r\n                            Action\r\n                        </Typography>\r\n                    </TableCell>\r\n                )}\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n    theme: PropTypes.object,\r\n    selected: PropTypes.array,\r\n    numSelected: PropTypes.number.isRequired,\r\n    onRequestSort: PropTypes.func.isRequired,\r\n    onSelectAllClick: PropTypes.func.isRequired,\r\n    order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n    orderBy: PropTypes.string.isRequired,\r\n    rowCount: PropTypes.number.isRequired\r\n};\r\n\r\n// ==============================|| TABLE HEADER TOOLBAR ||============================== //\r\n\r\nconst EnhancedTableToolbar = ({ numSelected }) => (\r\n    <Toolbar\r\n        sx={{\r\n            p: 0,\r\n            pl: 1,\r\n            pr: 1,\r\n            ...(numSelected > 0 && {\r\n                color: (theme) => theme.palette.secondary.main\r\n            })\r\n        }}\r\n    >\r\n        {numSelected > 0 ? (\r\n            <Typography color=\"inherit\" variant=\"h4\">\r\n                {numSelected} Selected\r\n            </Typography>\r\n        ) : (\r\n            <Typography variant=\"h6\" id=\"tableTitle\">\r\n                Nutrition\r\n            </Typography>\r\n        )}\r\n        <Box sx={{ flexGrow: 1 }} />\r\n        {numSelected > 0 && (\r\n            <Tooltip title=\"Delete\">\r\n                <IconButton size=\"large\">\r\n                    <DeleteIcon fontSize=\"small\" />\r\n                </IconButton>\r\n            </Tooltip>\r\n        )}\r\n    </Toolbar>\r\n);\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n    numSelected: PropTypes.number.isRequired\r\n};\r\n\r\n// ==============================|| PRODUCT REVIEW LIST ||============================== //\r\n\r\nconst ProductReviewList = () => {\r\n    const theme = useTheme();\r\n    const dispatch = useDispatch();\r\n\r\n    // open dialog to edit review\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleClickOpenDialog = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleCloseDialog = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const [order, setOrder] = React.useState('asc');\r\n    const [orderBy, setOrderBy] = React.useState('calories');\r\n    const [selected, setSelected] = React.useState([]);\r\n    const [page, setPage] = React.useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\r\n    const [search, setSearch] = React.useState('');\r\n    const [rows, setRows] = React.useState([]);\r\n    const { productreviews } = useSelector((state) => state.customer);\r\n    React.useEffect(() => {\r\n        dispatch(getProductReviews());\r\n    }, [dispatch]);\r\n    React.useEffect(() => {\r\n        setRows(productreviews);\r\n    }, [productreviews]);\r\n\r\n    const handleSearch = (event) => {\r\n        const newString = event?.target.value;\r\n        setSearch(newString || '');\r\n\r\n        if (newString) {\r\n            const newRows = rows.filter((row) => {\r\n                let matches = true;\r\n\r\n                const properties = ['name', 'author', 'review'];\r\n                let containsQuery = false;\r\n\r\n                properties.forEach((property) => {\r\n                    if (row[property].toString().toLowerCase().includes(newString.toString().toLowerCase())) {\r\n                        containsQuery = true;\r\n                    }\r\n                });\r\n\r\n                if (!containsQuery) {\r\n                    matches = false;\r\n                }\r\n                return matches;\r\n            });\r\n            setRows(newRows);\r\n        } else {\r\n            setRows(productreviews);\r\n        }\r\n    };\r\n\r\n    const handleRequestSort = (event, property) => {\r\n        const isAsc = orderBy === property && order === 'asc';\r\n        setOrder(isAsc ? 'desc' : 'asc');\r\n        setOrderBy(property);\r\n    };\r\n\r\n    const handleSelectAllClick = (event) => {\r\n        if (event.target.checked) {\r\n            const newSelectedId = rows.map((n) => n.name);\r\n            setSelected(newSelectedId);\r\n            return;\r\n        }\r\n        setSelected([]);\r\n    };\r\n\r\n    const handleClick = (event, name) => {\r\n        const selectedIndex = selected.indexOf(name);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            newSelected = newSelected.concat(selected, name);\r\n        } else if (selectedIndex === 0) {\r\n            newSelected = newSelected.concat(selected.slice(1));\r\n        } else if (selectedIndex === selected.length - 1) {\r\n            newSelected = newSelected.concat(selected.slice(0, -1));\r\n        } else if (selectedIndex > 0) {\r\n            newSelected = newSelected.concat(selected.slice(0, selectedIndex), selected.slice(selectedIndex + 1));\r\n        }\r\n\r\n        setSelected(newSelected);\r\n    };\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event?.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const isSelected = (name) => selected.indexOf(name) !== -1;\r\n\r\n    const emptyRows = page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n    return (\r\n        <MainCard title=\"Product Review\" content={false}>\r\n            <CardContent>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\" spacing={2}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            InputProps={{\r\n                                startAdornment: (\r\n                                    <InputAdornment position=\"start\">\r\n                                        <SearchIcon fontSize=\"small\" />\r\n                                    </InputAdornment>\r\n                                )\r\n                            }}\r\n                            onChange={handleSearch}\r\n                            placeholder=\"Search Product\"\r\n                            value={search}\r\n                            size=\"small\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} sx={{ textAlign: 'right' }}>\r\n                        <Tooltip title=\"Copy\">\r\n                            <IconButton size=\"large\">\r\n                                <FileCopyIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Print\">\r\n                            <IconButton size=\"large\">\r\n                                <PrintIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Filter\">\r\n                            <IconButton size=\"large\">\r\n                                <FilterListIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n\r\n            {/* table */}\r\n            <TableContainer>\r\n                <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\r\n                    <EnhancedTableHead\r\n                        numSelected={selected.length}\r\n                        order={order}\r\n                        orderBy={orderBy}\r\n                        onSelectAllClick={handleSelectAllClick}\r\n                        onRequestSort={handleRequestSort}\r\n                        rowCount={rows.length}\r\n                        theme={theme}\r\n                        selected={selected}\r\n                    />\r\n                    <TableBody>\r\n                        {stableSort(rows, getComparator(order, orderBy))\r\n                            .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                            .map((row, index) => {\r\n                                /** Make sure no display bugs if row isn't an OrderData object */\r\n                                if (typeof row === 'number') return null;\r\n                                const isItemSelected = isSelected(row.name);\r\n                                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        aria-checked={isItemSelected}\r\n                                        tabIndex={-1}\r\n                                        key={index}\r\n                                        selected={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\" onClick={(event) => handleClick(event, row.name)} sx={{ pl: 3 }}>\r\n                                            <Checkbox\r\n                                                color=\"primary\"\r\n                                                checked={isItemSelected}\r\n                                                inputProps={{\r\n                                                    'aria-labelledby': labelId\r\n                                                }}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            component=\"th\"\r\n                                            id={labelId}\r\n                                            scope=\"row\"\r\n                                            onClick={(event) => handleClick(event, row.name)}\r\n                                            sx={{ cursor: 'pointer' }}\r\n                                        >\r\n                                            <Typography\r\n                                                variant=\"body2\"\r\n                                                sx={{ color: theme.palette.mode === 'dark' ? 'grey.600' : 'grey.900' }}\r\n                                            >\r\n                                                {' '}\r\n                                                {row.name}{' '}\r\n                                            </Typography>\r\n                                        </TableCell>\r\n                                        <TableCell>{row.author}</TableCell>\r\n                                        <TableCell>{row.review}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            <Rating name=\"read-only\" value={row.rating} precision={0.5} readOnly />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\">{row.date}</TableCell>\r\n                                        <TableCell align=\"center\">\r\n                                            {row.status === 1 && <Chip label=\"Complete\" chipcolor=\"success\" size=\"small\" />}\r\n                                            {row.status === 2 && <Chip label=\"Processing\" chipcolor=\"orange\" size=\"small\" />}\r\n                                            {row.status === 3 && <Chip label=\"Confirm\" chipcolor=\"primary\" size=\"small\" />}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\" sx={{ pr: 3 }}>\r\n                                            <IconButton color=\"primary\" size=\"large\">\r\n                                                <VisibilityTwoToneIcon sx={{ fontSize: '1.3rem' }} />\r\n                                            </IconButton>\r\n                                            <IconButton color=\"secondary\" onClick={handleClickOpenDialog} size=\"large\">\r\n                                                <EditTwoToneIcon sx={{ fontSize: '1.3rem' }} />\r\n                                            </IconButton>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                            })}\r\n                        {emptyRows > 0 && (\r\n                            <TableRow\r\n                                style={{\r\n                                    height: 53 * emptyRows\r\n                                }}\r\n                            >\r\n                                <TableCell colSpan={6} />\r\n                            </TableRow>\r\n                        )}\r\n                    </TableBody>\r\n                </Table>\r\n\r\n                {/* review edit dialog */}\r\n                <ReviewEdit open={open} handleCloseDialog={handleCloseDialog} />\r\n            </TableContainer>\r\n\r\n            {/* table pagination */}\r\n            <TablePagination\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={rows.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={handleChangeRowsPerPage}\r\n            />\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default ProductReviewList;\r\n"],"sourceRoot":""}